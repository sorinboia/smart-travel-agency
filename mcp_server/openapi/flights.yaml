openapi: 3.0.3
info:
  title: Flights Service API
  version: 0.1.0
  description: |
    The Flights Service provides search, booking, and management of flight reservations for the travel agency platform. It exposes endpoints for searching available flights (from a MinIO-backed catalogue), retrieving flight details, creating and managing bookings (stored in MongoDB), and health checks. Most endpoints require JWT authentication.
  contact:
    name: STA Travel Engineering
    email: engineering@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
servers:
  - url: https://api.example.com/flights
    description: Production server
  - url: http://localhost:4002
    description: Local development server
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Flight:
      type: object
      required: [flight_id, origin, destination, departure_utc, duration_min, class_fares]
      properties:
        flight_id:
          type: string
          example: f1
        origin:
          type: object
          required: [iata]
          properties:
            iata:
              type: string
              example: TLV
        destination:
          type: object
          required: [iata]
          properties:
            iata:
              type: string
              example: JFK
        departure_utc:
          type: string
          format: date-time
          example: 2025-07-10T08:00:00Z
        duration_min:
          type: integer
          example: 600
        class_fares:
          type: array
          items:
            $ref: '#/components/schemas/ClassFare'
    ClassFare:
      type: object
      required: [class, seats_left, price]
      properties:
        class:
          type: string
          example: Economy
        seats_left:
          type: integer
          example: 2
        price:
          $ref: '#/components/schemas/Price'
    Price:
      type: object
      required: [amount]
      properties:
        amount:
          type: number
          example: 500
    Booking:
      type: object
      required: [pnr, userId, flightId, class, status, createdAt]
      properties:
        _id:
          type: string
          description: MongoDB ObjectId
          example: 64a7b2c3e1f2a1b2c3d4e5f6
        pnr:
          type: string
          description: Unique booking reference
          example: 64a7b2c3e1f2a1b2c3d4e5f6
        userId:
          type: string
          example: user-123
        flightId:
          type: string
          example: f1
        class:
          type: string
          example: Economy
        status:
          type: string
          enum: [active, cancelled]
          example: active
        createdAt:
          type: string
          format: date-time
          example: 2025-07-01T12:00:00Z
    BookingList:
      type: object
      properties:
        bookings:
          type: array
          items:
            $ref: '#/components/schemas/Booking'
    Error:
      type: object
      properties:
        error:
          type: string
          example: Error message
    Healthz:
      type: object
      properties:
        status:
          type: string
          example: ok
        uptime:
          type: number
          example: 123.45
security:
  - bearerAuth: []
paths:
  /flights:
    get:
      summary: Search available flights
      description: |
        Returns a list of available flights matching the provided filters. This endpoint is public and does not require authentication.
      parameters:
        - in: query
          name: origin
          schema:
            type: string
          description: IATA code of origin airport
        - in: query
          name: destination
          schema:
            type: string
          description: IATA code of destination airport
        - in: query
          name: departureDate
          schema:
            type: string
            example: 2025-07-10
          description: Departure date (YYYY-MM-DD)
        - in: query
          name: class
          schema:
            type: string
          description: Fare class (e.g., Economy, Business)
      responses:
        '200':
          description: List of matching flights
          content:
            application/json:
              schema:
                type: object
                properties:
                  flights:
                    type: array
                    items:
                      $ref: '#/components/schemas/Flight'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /flights/{flightId}:
    get:
      summary: Get flight details
      description: |
        Returns details for a specific flight. Requires JWT authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: flightId
          required: true
          schema:
            type: string
          description: Flight ID
      responses:
        '200':
          description: Flight details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Flight'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Flight not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /bookings:
    post:
      summary: Create a new booking
      description: |
        Books a seat on a flight for the authenticated user. Requires JWT authentication.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [flightId, class]
              properties:
                flightId:
                  type: string
                  description: Flight ID to book
                class:
                  type: string
                  description: Fare class to book (e.g., Economy)
      responses:
        '201':
          description: Booking created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '400':
          description: Missing or invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Booking conflict (e.g., no seats left)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      summary: List user bookings
      description: |
        Returns a paginated list of bookings for the authenticated user. Requires JWT authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [active, cancelled]
          description: Filter by booking status
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 20
          description: Results per page
      responses:
        '200':
          description: List of bookings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingList'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /bookings/{bookingId}:
    delete:
      summary: Cancel a booking
      description: |
        Cancels a booking for the authenticated user. Requires JWT authentication.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: string
          description: Booking ID (MongoDB ObjectId)
      responses:
        '200':
          description: Booking cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Booking not found or already cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /healthz:
    get:
      summary: Health check
      description: Returns service status and uptime.
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Healthz'